import { NextResponse } from 'next/server';
import mongoose from 'mongoose';

// Conexão com MongoDB
const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
    throw new Error('Por favor, defina a variável de ambiente MONGODB_URI');
}

let cached = global.mongoose ?? (global.mongoose = { conn: null, promise: null });

async function connectDB() {
    if (cached.conn) {
        return cached.conn;
    }

    if (!cached.promise) {
        const opts = {
            bufferCommands: false,
        };

        cached.promise = mongoose.connect(MONGODB_URI!, opts).then((mongoose) => {
            return mongoose;
        });
    }

    try {
        cached.conn = await cached.promise;
    } catch (e) {
        cached.promise = null;
        throw e;
    }

    return cached.conn;
}

// Schema do Menu
const menuItemSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    },
    description: {
        type: String,
        required: true
    },
    price: {
        type: Number,
        required: true,
        min: 0
    },
    category: {
        type: String,
        required: true
    },
    image: {
        type: String,
        default: ''
    },
    destaque: {
        type: Boolean,
        default: false
    },
    sizes: {
        type: Map,
        of: Number,
        default: {}
    },
    ingredients: {
        type: [String],
        default: []
    },
    borderOptions: {
        type: Map,
        of: Number,
        default: {}
    },
    extraOptions: {
        type: Map,
        of: Number,
        default: {}
    }
});

const MenuItem = mongoose.models.MenuItem || mongoose.model('MenuItem', menuItemSchema);

// Dados iniciais do menu
const initialMenuItems = [
    // Bebidas
    {
        name: "Guaraná 1L",
        description: "Refrigerante Guaraná Antarctica 1 litro, gelada",
        price: 9.00,
        category: "bebidas",
        image: "https://prezunic.vtexassets.com/arquivos/ids/191915/6568d69ee1d9f5b4beb95b2d.jpg?v=638369663059270000",
        destaque: false,
        sizes: {},
        ingredients: ["Guaraná"],
        borderOptions: {},
        extraOptions: {}
    },
    {
        name: "Coca-Cola 1L",
        description: "Refrigerante Coca-Cola 1 litro, gelada",
        price: 9.00,
        category: "bebidas",
        image: "https://prezunic.vtexassets.com/arquivos/ids/191915/6568d69ee1d9f5b4beb95b2d.jpg?v=638369663059270000",
        destaque: false,
        sizes: {},
        ingredients: ["Coca-Cola"],
        borderOptions: {},
        extraOptions: {}
    },
    {
        name: "Suco de Laranja",
        description: "Suco natural de laranja, 300ml",
        price: 8.00,
        category: "bebidas",
        image: "https://prezunic.vtexassets.com/arquivos/ids/191915/6568d69ee1d9f5b4beb95b2d.jpg?v=638369663059270000",
        destaque: false,
        sizes: {},
        ingredients: ["Laranja natural"],
        borderOptions: {},
        extraOptions: {}
    },

    // Pizzas
    {
        name: "Pizza Margherita",
        description: "Molho de tomate, mussarela, tomate e manjericão",
        price: 45.00,
        category: "pizzas",
        image: "https://prezunic.vtexassets.com/arquivos/ids/191915/6568d69ee1d9f5b4beb95b2d.jpg?v=638369663059270000",
        destaque: true,
        sizes: {
            P: 35.00,
            G: 45.00
        },
        ingredients: ["Molho de tomate", "Mussarela", "Tomate", "Manjericão"],
        borderOptions: {
            "Cheddar": 5.00,
            "Catupiry": 5.00,
            "Chocolate": 7.00
        },
        extraOptions: {}
    },
    {
        name: "Pizza Calabresa",
        description: "Molho de tomate, mussarela, calabresa e cebola",
        price: 48.00,
        category: "pizzas",
        image: "https://prezunic.vtexassets.com/arquivos/ids/191915/6568d69ee1d9f5b4beb95b2d.jpg?v=638369663059270000",
        destaque: false,
        sizes: {
            P: 38.00,
            G: 48.00
        },
        ingredients: ["Molho de tomate", "Mussarela", "Calabresa", "Cebola"],
        borderOptions: {
            "Cheddar": 5.00,
            "Catupiry": 5.00,
            "Chocolate": 7.00
        },
        extraOptions: {}
    },
    {
        name: "Pizza Frango com Catupiry",
        description: "Molho de tomate, mussarela, frango desfiado e catupiry",
        price: 52.00,
        category: "pizzas",
        image: "https://prezunic.vtexassets.com/arquivos/ids/191915/6568d69ee1d9f5b4beb95b2d.jpg?v=638369663059270000",
        destaque: true,
        sizes: {
            P: 42.00,
            G: 52.00
        },
        ingredients: ["Molho de tomate", "Mussarela", "Frango desfiado", "Catupiry"],
        borderOptions: {
            "Cheddar": 5.00,
            "Catupiry": 5.00,
            "Chocolate": 7.00
        },
        extraOptions: {}
    },

    // Massas
    {
        name: "Espaguete à Bolonhesa",
        description: "Espaguete com molho de carne moída e tomate",
        price: 32.00,
        category: "massas",
        image: "https://prezunic.vtexassets.com/arquivos/ids/191915/6568d69ee1d9f5b4beb95b2d.jpg?v=638369663059270000",
        destaque: false,
        sizes: {},
        ingredients: ["Espaguete", "Carne moída", "Molho de tomate", "Queijo parmesão"],
        borderOptions: {},
        extraOptions: {
            "Queijo extra": 3.00,
            "Carne extra": 5.00
        }
    },
    {
        name: "Fettuccine ao Molho Branco",
        description: "Fettuccine com molho branco e frango grelhado",
        price: 35.00,
        category: "massas",
        image: "https://prezunic.vtexassets.com/arquivos/ids/191915/6568d69ee1d9f5b4beb95b2d.jpg?v=638369663059270000",
        destaque: true,
        sizes: {},
        ingredients: ["Fettuccine", "Molho branco", "Frango grelhado", "Queijo parmesão"],
        borderOptions: {},
        extraOptions: {
            "Queijo extra": 3.00,
            "Frango extra": 6.00
        }
    },

    {
        name: "Ravioli de Queijo",
        description: "Ravioli recheado com queijo, ao molho de tomate",
        price: 38.00,
        category: "massas",
        image: "https://prezunic.vtexassets.com/arquivos/ids/191915/6568d69ee1d9f5b4beb95b2d.jpg?v=638369663059270000",
        destaque: false,
        sizes: {},
        ingredients: ["Ravioli", "Queijo ricota", "Molho de tomate", "Manjericão"],
        borderOptions: {},
        extraOptions: {
            "Queijo extra": 3.00,
            "Molho extra": 2.00
        }
    },

    // Sobremesas
    {
        name: "Pudim de Leite",
        description: "Pudim de leite condensado com calda de caramelo",
        price: 12.00,
        category: "sobremesas",
        image: "https://prezunic.vtexassets.com/arquivos/ids/191915/6568d69ee1d9f5b4beb95b2d.jpg?v=638369663059270000",
        destaque: true,
        sizes: {},
        ingredients: ["Leite condensado", "Ovos", "Leite", "Açúcar"],
        borderOptions: {},
        extraOptions: {}
    },
    {
        name: "Mousse de Chocolate",
        description: "Mousse de chocolate com raspas de chocolate",
        price: 14.00,
        category: "sobremesas",
        image: "https://prezunic.vtexassets.com/arquivos/ids/191915/6568d69ee1d9f5b4beb95b2d.jpg?v=638369663059270000",
        destaque: false,
        sizes: {},
        ingredients: ["Chocolate", "Creme de leite", "Ovos", "Açúcar"],
        borderOptions: {},
        extraOptions: {}
    },
    {
        name: "Sorvete de Creme",
        description: "Sorvete de creme com calda de chocolate",
        price: 10.00,
        category: "sobremesas",
        image: "https://prezunic.vtexassets.com/arquivos/ids/191915/6568d69ee1d9f5b4beb95b2d.jpg?v=638369663059270000",
        destaque: false,
        sizes: {},
        ingredients: ["Creme", "Leite", "Açúcar", "Calda de chocolate"],
        borderOptions: {},
        extraOptions: {}
    }
];

export async function GET() {
    try {
        console.log('GET /api/menu - Iniciando...');
        await connectDB();
        console.log('GET /api/menu - Conectado ao MongoDB');

        const count = await MenuItem.countDocuments();
        console.log('GET /api/menu - Contagem de itens:', count);

        // Se não houver itens, insere os dados iniciais
        if (count === 0) {
            console.log('GET /api/menu - Inserindo dados iniciais...');
            await MenuItem.insertMany(initialMenuItems);
            console.log('GET /api/menu - Dados iniciais inseridos');
        }

        const menuItems = await MenuItem.find();
        console.log('GET /api/menu - Itens encontrados:', menuItems.length);

        return NextResponse.json({
            success: true,
            data: menuItems
        });
    } catch (error) {
        console.error('Erro ao buscar menu:', error);
        return NextResponse.json(
            { success: false, error: 'Erro ao buscar menu' },
            { status: 500 }
        );
    }
}

export async function POST(request: Request) {
    try {
        const item = await request.json();
        await connectDB();

        const newItem = await MenuItem.create(item);
        return NextResponse.json({
            success: true,
            data: newItem
        });
    } catch (error) {
        console.error('Erro ao criar item do menu:', error);
        return NextResponse.json(
            { success: false, error: 'Erro ao criar item do menu' },
            { status: 500 }
        );
    }
}

export async function PUT(request: Request) {
    try {
        const { _id, ...updates } = await request.json();
        await connectDB();

        const updatedItem = await MenuItem.findByIdAndUpdate(
            _id,
            updates,
            { new: true }
        );

        if (!updatedItem) {
            return NextResponse.json(
                { success: false, error: 'Item não encontrado' },
                { status: 404 }
            );
        }

        return NextResponse.json({
            success: true,
            data: updatedItem
        });
    } catch (error) {
        console.error('Erro ao atualizar item do menu:', error);
        return NextResponse.json(
            { success: false, error: 'Erro ao atualizar item do menu' },
            { status: 500 }
        );
    }
}

export async function DELETE(request: Request) {
    try {
        const { _id } = await request.json();
        await connectDB();

        const deletedItem = await MenuItem.findByIdAndDelete(_id);

        if (!deletedItem) {
            return NextResponse.json(
                { success: false, error: 'Item não encontrado' },
                { status: 404 }
            );
        }

        return NextResponse.json({
            success: true,
            message: 'Item excluído com sucesso'
        });
    } catch (error) {
        console.error('Erro ao deletar item do menu:', error);
        return NextResponse.json(
            { success: false, error: 'Erro ao deletar item do menu' },
            { status: 500 }
        );
    }
} 